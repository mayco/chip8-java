package be.khleuven.arnautsmichael.chip8;

import be.khleuven.arnautsmichael.chip8.Cpu;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.jdom.*;
import org.jdom.input.*;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;

/**
 *
 * @author  Michaël Arnauts
 */
public class chip8main extends javax.swing.JFrame {
    
    private Debug debug;
    private Help help;
    private ChangeKeys changeKeys;
    
    private Cpu cpu;
    private Input input;
    private Memory memory;
    private Sound sound;
    private Lcd lcd;
    
    private Video video;

    private Vector<ScreenColor> colorList;
    
    private boolean settingSound = true;
    private int settingColor = 0;
    private int settingSize = 2;
    private int[] keyMapKeyboard = Input.getDefaultKeyMapKeyboard();

    /** Creates new form chip8main */
    public chip8main() {
        initComponents();

        // load colors in colorList
        loadColors();
        
        // load settings from file
        loadSettings();
        
        // initialize parts
        sound = new Sound(settingSound);
        input = new Input(keyMapKeyboard);
        memory = new Memory();
        lcd = new Lcd(colorList.get(settingColor));
        video = new Video(lcd, settingSize);
        
        this.addKeyListener(input);

        // Actie is used to notify the main program to update it's GUI
        cpu = new Cpu(lcd, video, input, memory, sound, new Actie() { public void actie() { updateGUI(); } });

        // other windows
        help = new Help();
        debug = new Debug(cpu, memory);
        changeKeys = new ChangeKeys(input);  
        
        this.getContentPane().add(video);
        this.pack();        

        updateGUI();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuFileOpenRom = new javax.swing.JMenuItem();
        jMenuFileCloseRom = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuFileScreenshot = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuFileExit = new javax.swing.JMenuItem();
        jMenuCPU = new javax.swing.JMenu();
        jMenuCPUStart = new javax.swing.JMenuItem();
        jMenuCPUStop = new javax.swing.JMenuItem();
        jMenuCPUReset = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuCPUShowDebug = new javax.swing.JMenuItem();
        jMenuSettings = new javax.swing.JMenu();
        jMenuWindowSize = new javax.swing.JMenu();
        jMenuWindowSize1 = new javax.swing.JRadioButtonMenuItem();
        jMenuWindowSize2 = new javax.swing.JRadioButtonMenuItem();
        jMenuWindowSize3 = new javax.swing.JRadioButtonMenuItem();
        jMenuWindowSize4 = new javax.swing.JRadioButtonMenuItem();
        jMenuWindowColor = new javax.swing.JMenu();
        jSeparator5 = new javax.swing.JSeparator();
        jMenuSettingsKeys = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        jMenuSettingsSound = new javax.swing.JCheckBoxMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuHelpHelp = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        jMenuHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("chip8");
        setLocationByPlatform(true);
        setResizable(false);
        jMenuFile.setText("File");
        jMenuFileOpenRom.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuFileOpenRom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/document-open.png")));
        jMenuFileOpenRom.setText("Open Rom...");
        jMenuFileOpenRom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileOpenRomActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuFileOpenRom);

        jMenuFileCloseRom.setText("Close Rom");
        jMenuFileCloseRom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileCloseRomActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuFileCloseRom);

        jMenuFile.add(jSeparator2);

        jMenuFileScreenshot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuFileScreenshot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/camera-photo.png")));
        jMenuFileScreenshot.setText("Save screenshot...");
        jMenuFileScreenshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileScreenshotActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuFileScreenshot);

        jMenuFile.add(jSeparator3);

        jMenuFileExit.setText("Exit");
        jMenuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileExitActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuFileExit);

        jMenuBar.add(jMenuFile);

        jMenuCPU.setText("CPU");
        jMenuCPUStart.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuCPUStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/media-playback-start.png")));
        jMenuCPUStart.setText("Start");
        jMenuCPUStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCPUStartActionPerformed(evt);
            }
        });

        jMenuCPU.add(jMenuCPUStart);

        jMenuCPUStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuCPUStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/media-playback-stop.png")));
        jMenuCPUStop.setText("Stop");
        jMenuCPUStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCPUStopActionPerformed(evt);
            }
        });

        jMenuCPU.add(jMenuCPUStop);

        jMenuCPUReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuCPUReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/media-skip-backward.png")));
        jMenuCPUReset.setText("Reset");
        jMenuCPUReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCPUResetActionPerformed(evt);
            }
        });

        jMenuCPU.add(jMenuCPUReset);

        jMenuCPU.add(jSeparator1);

        jMenuCPUShowDebug.setText("Debug...");
        jMenuCPUShowDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCPUShowDebugActionPerformed(evt);
            }
        });

        jMenuCPU.add(jMenuCPUShowDebug);

        jMenuBar.add(jMenuCPU);

        jMenuSettings.setText("Settings");
        jMenuWindowSize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/view-fullscreen.png")));
        jMenuWindowSize.setText("Change Size");
        jMenuWindowSize1.setText("1x");
        jMenuWindowSize1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuWindowSize1ActionPerformed(evt);
            }
        });

        jMenuWindowSize.add(jMenuWindowSize1);

        jMenuWindowSize2.setText("2x");
        jMenuWindowSize2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuWindowSize1ActionPerformed(evt);
            }
        });

        jMenuWindowSize.add(jMenuWindowSize2);

        jMenuWindowSize3.setText("3x");
        jMenuWindowSize3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuWindowSize1ActionPerformed(evt);
            }
        });

        jMenuWindowSize.add(jMenuWindowSize3);

        jMenuWindowSize4.setText("4x");
        jMenuWindowSize4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuWindowSize1ActionPerformed(evt);
            }
        });

        jMenuWindowSize.add(jMenuWindowSize4);

        jMenuSettings.add(jMenuWindowSize);

        jMenuWindowColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/applications-graphics.png")));
        jMenuWindowColor.setText("Change Color");
        jMenuSettings.add(jMenuWindowColor);

        jMenuSettings.add(jSeparator5);

        jMenuSettingsKeys.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/input-keyboard.png")));
        jMenuSettingsKeys.setText("Configure Keys...");
        jMenuSettingsKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSettingsKeysActionPerformed(evt);
            }
        });

        jMenuSettings.add(jMenuSettingsKeys);

        jMenuSettings.add(jSeparator6);

        jMenuSettingsSound.setText("Enable Sound");
        jMenuSettingsSound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/audio-volume-high.png")));
        jMenuSettingsSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSettingsSoundActionPerformed(evt);
            }
        });

        jMenuSettings.add(jMenuSettingsSound);

        jMenuBar.add(jMenuSettings);

        jMenuHelp.setText("Help");
        jMenuHelpHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuHelpHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/be/khleuven/arnautsmichael/chip8/icons/help-browser.png")));
        jMenuHelpHelp.setText("Help...");
        jMenuHelpHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHelpHelpActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuHelpHelp);

        jMenuHelp.add(jSeparator4);

        jMenuHelpAbout.setText("About...");
        jMenuHelpAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHelpAboutActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuHelpAbout);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadSettings() {
        if (new File("settings.xml").exists())
            try {
                SAXBuilder builder = new SAXBuilder(false);
                Document doc = builder.build("settings.xml");
                settingSound = (doc.getRootElement().getChild("sound").getText() == "1");
                settingSize = new Integer(doc.getRootElement().getChild("size").getText());
                settingColor = new Integer(doc.getRootElement().getChild("color").getText());
                
                for (int i=0; i<16; i++)
                    keyMapKeyboard[i] = new Integer(doc.getRootElement().getChild("keys").getChild("key"+i).getText());
                
            } catch (Exception e) {
                e.printStackTrace();
            }        
    }
    
    private void saveSettings() {
        Element base = new Element("settings");
        base.addContent(new Element("sound").addContent(settingSound?"1":"0"));
        base.addContent(new Element("size").addContent(Integer.toString(settingSize)));
        base.addContent(new Element("color").addContent(Integer.toString(settingColor)));

        Element keys = new Element("keys");
        for (int i=0; i<16; i++)
            keys.addContent(new Element("key"+i).addContent(Integer.toString(input.getKeyMapKeyboard()[i])));
        base.addContent(keys);
        
        Document doc = new Document(base);
        XMLOutputter uit = new XMLOutputter();
        uit.setFormat(Format.getRawFormat().setIndent("\t").setLineSeparator("\r\n"));
        try {
            FileOutputStream bestand = new FileOutputStream("settings.xml");
            uit.output(doc, bestand);
        } catch (Exception e) {
            e.printStackTrace();
        }   
    }
    
    private void loadColors() {
        colorList = new Vector<ScreenColor>();
        try {
            SAXBuilder builder = new SAXBuilder(false);
            Document doc = builder.build(this.getClass().getResource("colors.xml"));
            Iterator it = doc.getRootElement().getChildren().iterator();
            while (it.hasNext()) {
                Element el = (Element)it.next();
                String name = el.getAttributeValue("name");
                colorList.add(new ScreenColor(new Color(Integer.parseInt(el.getAttributeValue("foreground"), 16)), new Color(Integer.parseInt(el.getAttributeValue("background"), 16)), name));
                
                // add to menu
                JRadioButtonMenuItem menuItem = new JRadioButtonMenuItem(name, false);
                menuItem.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) { jMenuColorSelect(evt); }
                });
                jMenuWindowColor.add(menuItem);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }        
    }
    
    private void jMenuSettingsKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSettingsKeysActionPerformed
        changeKeys.setVisible(true);
    }//GEN-LAST:event_jMenuSettingsKeysActionPerformed

    private void jMenuSettingsSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSettingsSoundActionPerformed
        sound.setEnabled(jMenuSettingsSound.isSelected());
        settingSound = sound.isEnabled();
    }//GEN-LAST:event_jMenuSettingsSoundActionPerformed

    private void jMenuColorSelect(java.awt.event.ActionEvent evt) {
        boolean found = false;
        int index = 0;
        Iterator it = colorList.iterator();
        while (it.hasNext() && !found) {
            ScreenColor color = (ScreenColor)it.next();
            if (color.getName() == evt.getActionCommand()) {
                found = true;
                settingColor = index;
                lcd.setScreenColor(color); 
                video.repaint();
            }
            index++;
        }
        updateGUI();
    }
    
    private void jMenuFileScreenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileScreenshotActionPerformed
        FileDialog fileDialog = new FileDialog(this, "Save screenshot...", FileDialog.SAVE);
        fileDialog.setVisible(true);
        if (fileDialog.getFile() != null) {
            Image im = Toolkit.getDefaultToolkit().createImage(lcd);
            BufferedImage bi = new BufferedImage(im.getWidth(null), im.getHeight(null), BufferedImage.TYPE_INT_RGB);
            bi.createGraphics().drawImage(im, 0, 0, null);
            try {
                ImageIO.write(bi, "png", new File(fileDialog.getDirectory() + fileDialog.getFile()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }            
        }
    }//GEN-LAST:event_jMenuFileScreenshotActionPerformed

    private void jMenuWindowSize1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuWindowSize1ActionPerformed
        if (evt.getActionCommand() == "1x")       settingSize = 1;
        else if (evt.getActionCommand() == "2x")  settingSize = 2;
        else if (evt.getActionCommand() == "3x")  settingSize = 3;
        else if (evt.getActionCommand() == "4x")  settingSize = 4;
        video.setScale(settingSize);
        updateGUI();
        pack();
    }//GEN-LAST:event_jMenuWindowSize1ActionPerformed

    private void jMenuFileCloseRomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileCloseRomActionPerformed
        cpu.stop();
        memory.closeRom();
        cpu.initCPU();
        updateGUI();
    }//GEN-LAST:event_jMenuFileCloseRomActionPerformed

    private void jMenuCPUShowDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCPUShowDebugActionPerformed
        debug.setVisible(!debug.isVisible());
        this.requestFocusInWindow();
    }//GEN-LAST:event_jMenuCPUShowDebugActionPerformed

    private void jMenuHelpHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHelpHelpActionPerformed
        help.setVisible(true);
    }//GEN-LAST:event_jMenuHelpHelpActionPerformed

    private void jMenuHelpAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHelpAboutActionPerformed
        JOptionPane.showMessageDialog(this, "chip8 interpreter\nby: Michaël Arnauts", "chip8", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuHelpAboutActionPerformed

    private void jMenuCPUStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCPUStopActionPerformed
        cpu.stop();
    }//GEN-LAST:event_jMenuCPUStopActionPerformed
    
    private void jMenuCPUStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCPUStartActionPerformed
        cpu.start();
    }//GEN-LAST:event_jMenuCPUStartActionPerformed

    private void jMenuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileExitActionPerformed
        saveSettings();
        System.exit(0);
    }//GEN-LAST:event_jMenuFileExitActionPerformed

    private void jMenuCPUResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCPUResetActionPerformed
        boolean wasRunning = cpu.getRunning();
        cpu.stop();
        memory.reloadRom(); // also reload the rom, aka "Hard reset"
        cpu.initCPU();
        if (wasRunning)
            cpu.start();
    }//GEN-LAST:event_jMenuCPUResetActionPerformed
    
    private void jMenuFileOpenRomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileOpenRomActionPerformed
        FileDialog fileDialog = new FileDialog(this, "Load Rom...", FileDialog.LOAD);
        fileDialog.setVisible(true);

        if (fileDialog.getFile() != null) {
            cpu.stop();
            while (cpu.getRunning()) {}; // wait for the cpu to stop
            if (memory.loadRom(fileDialog.getDirectory(), fileDialog.getFile())) {
                cpu.initCPU();
                if (!debug.isVisible())
                    cpu.start();
            } else {
                JOptionPane.showMessageDialog(this, "Could not load the file you have selected.", "chip8", JOptionPane.ERROR_MESSAGE);
            }
        }
        updateGUI();
    }//GEN-LAST:event_jMenuFileOpenRomActionPerformed
    
    public void updateGUI() {
        boolean running = cpu.getRunning();
        boolean romLoaded = memory.isRomLoaded();
        jMenuCPUStart.setEnabled(!running && romLoaded);
        jMenuCPUStop.setEnabled(running && romLoaded);
        jMenuCPUReset.setEnabled(romLoaded);
        jMenuFileCloseRom.setEnabled(romLoaded);
        if (romLoaded)
            if (running)
                this.setTitle("chip8 - " + memory.getRomName() + " (Running)");
            else
                this.setTitle("chip8 - " + memory.getRomName() + " (Stopped)");
        else
            this.setTitle("chip8");
        
        // scale
        jMenuWindowSize1.setSelected(video.getScale() == 1);
        jMenuWindowSize2.setSelected(video.getScale() == 2);
        jMenuWindowSize3.setSelected(video.getScale() == 3);
        jMenuWindowSize4.setSelected(video.getScale() == 4);

        // colors
        boolean found = false;
        for (int i=0; i<jMenuWindowColor.getItemCount(); i++) {
            JMenuItem menuItem = jMenuWindowColor.getItem(i);
            menuItem.setSelected((menuItem.getText() == lcd.getScreenColor().getName()));
        }
        
        // sound
        jMenuSettingsSound.setSelected(sound.isEnabled());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel( UIManager.getSystemLookAndFeelClassName() );        
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chip8main().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuCPU;
    private javax.swing.JMenuItem jMenuCPUReset;
    private javax.swing.JMenuItem jMenuCPUShowDebug;
    private javax.swing.JMenuItem jMenuCPUStart;
    private javax.swing.JMenuItem jMenuCPUStop;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuFileCloseRom;
    private javax.swing.JMenuItem jMenuFileExit;
    private javax.swing.JMenuItem jMenuFileOpenRom;
    private javax.swing.JMenuItem jMenuFileScreenshot;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuHelpAbout;
    private javax.swing.JMenuItem jMenuHelpHelp;
    private javax.swing.JMenu jMenuSettings;
    private javax.swing.JMenuItem jMenuSettingsKeys;
    private javax.swing.JCheckBoxMenuItem jMenuSettingsSound;
    private javax.swing.JMenu jMenuWindowColor;
    private javax.swing.JMenu jMenuWindowSize;
    private javax.swing.JRadioButtonMenuItem jMenuWindowSize1;
    private javax.swing.JRadioButtonMenuItem jMenuWindowSize2;
    private javax.swing.JRadioButtonMenuItem jMenuWindowSize3;
    private javax.swing.JRadioButtonMenuItem jMenuWindowSize4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    // End of variables declaration//GEN-END:variables
    
}
